name: Terraform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  TF_VERSION: "1.13.3"
  TFLINT_VERSION: "v0.48.0"
  TERRAFORM_DOCS_VERSION: "v0.18.0"

jobs:
  # ================================
  # CI JOBS - Continuous Integration
  # ================================
  
  # Security scanning
  ci-security-scan:
    name: 'CI: Security Scan'
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Checkov action
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: true
          soft_fail: true
          framework: terraform
          output_format: sarif
          output_file_path: reports/results.sarif

      - name: Create reports directory if it doesn't exist
        run: mkdir -p reports

      - name: Upload Checkov scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/results.sarif

  # Terraform validation
  ci-terraform-validate:
    name: 'CI: Terraform Validate'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Init (Dev)
      run: terraform init
      working-directory: ./environments/dev

    - name: Terraform Validate (Dev)
      run: terraform validate
      working-directory: ./environments/dev

  # Terraform testing
  ci-terraform-test:
    name: 'CI: Terraform Test Suite'
    runs-on: ubuntu-latest
    needs: ci-terraform-validate
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure Azure credentials
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: terraform init
      working-directory: ./environments/dev

    - name: Temporarily Rename Minimal Test
      run: |
        if [ -f minimal.tftest.hcl ]; then
          echo "Temporarily disabling minimal.tftest.hcl to run production tests"
          mv minimal.tftest.hcl minimal.tftest.hcl.disabled
        else
          echo "WARNING: minimal.tftest.hcl not found, continuing..."
        fi
      working-directory: ./environments/dev

    - name: Run Unit Tests (Fast)
      run: |
        echo "Running Terraform unit tests..."
        terraform test ../../tests/unit/basic-validation.tftest.hcl
      working-directory: ./environments/dev

    - name: Run Integration Tests
      run: |
        echo "Running Terraform integration tests..."
        terraform test ../../tests/integration/module-integration.tftest.hcl
      working-directory: ./environments/dev

    - name: Run Security Validation Tests
      run: |
        echo "Running Terraform security validation..."
        terraform test ../../tests/security-validation.tftest.hcl
      working-directory: ./environments/dev
      continue-on-error: true

    - name: Run E2E Tests (Full Deployment)
      run: |
        echo "Running Terraform E2E deployment tests..."
        terraform test ../../tests/e2e/azure-deployment.tftest.hcl
      working-directory: ./environments/dev
      continue-on-error: true

    - name: Restore Minimal Test
      run: |
        if [ -f minimal.tftest.hcl.disabled ]; then
          echo "Restoring minimal.tftest.hcl for future development"
          mv minimal.tftest.hcl.disabled minimal.tftest.hcl
        else
          echo "WARNING: minimal.tftest.hcl.disabled not found, skipping restore..."
        fi
      working-directory: ./environments/dev
      if: always()

    - name: Test Results Summary
      if: always()
      run: |
        echo "Terraform Test Suite Complete"
        echo "Unit Tests: Fast plan-time validation"
        echo "Integration Tests: Module interaction validation"  
        echo "Security Tests: Policy and compliance validation"
        echo "E2E Tests: Full Azure deployment validation"

  # ====================================
  # CD JOBS - Continuous Deployment
  # ====================================
  
  # Plan for development
  cd-plan-dev:
    name: 'CD: Plan Dev Environment'
    runs-on: ubuntu-latest
    needs: ci-terraform-validate
    defaults:
      run:
        shell: bash
        working-directory: ./environments/dev
    outputs:
      plan_output: ${{ steps.plan.outputs.stdout }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure Azure credentials
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -input=false
      env:
        TF_VAR_ssh_public_key: ${{ secrets.TF_VAR_SSH_PUBLIC_KEY }}

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform
          ${{ steps.plan.outputs.stdout }}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  # Deploy to development
  cd-deploy-dev:
    name: 'CD: Deploy to Dev Environment'
    runs-on: ubuntu-latest
    needs: [cd-plan-dev, ci-terraform-test]  # Added test dependency
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    defaults:
      run:
        shell: bash
        working-directory: ./environments/dev
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure Azure credentials
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      env:
        TF_VAR_ssh_public_key: ${{ secrets.TF_VAR_SSH_PUBLIC_KEY }}