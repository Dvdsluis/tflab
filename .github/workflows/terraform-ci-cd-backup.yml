name: Terraform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  TF_VERSION: "1.13.3"
  TFLINT_VERSION: "v0.48.0"
  TERRAFORM_DOCS_VERSION: "v0.18.0"

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Checkov action
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: true
          soft_fail: true
          framework: terraform
          output_format: sarif
          output_file_path: reports/results.sarif

      - name: Create reports directory if it doesn't exist
        run: mkdir -p reports
        if: always()

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('reports/results.sarif') != ''
        with:
          sarif_file: reports/results.sarif

  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: Initialize TFLint
        run: tflint --init

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Run TFLint on modules
        run: |
          echo "Running TFLint on modules..."
          for module in modules/*/; do
            if [ -d "$module" ]; then
              echo "Linting $module"
              cd "$module"
              tflint
              cd - > /dev/null
            fi
          done

      - name: Run TFLint on environments
        run: |
          echo "Running TFLint on environments..."
          for env in environments/*/; do
            if [ -d "$env" ]; then
              echo "Linting $env"
              cd "$env"
              tflint
              cd - > /dev/null
            fi
          done

  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    needs: [security-scan, lint-and-format]
    strategy:
      matrix:
        environment: [dev, staging, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init - ${{ matrix.environment }}
        run: |
          cd environments/${{ matrix.environment }}
          terraform init -backend=false

      - name: Terraform Validate - ${{ matrix.environment }}
        run: |
          cd environments/${{ matrix.environment }}
          terraform validate

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Azure credentials
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Run Terraform Tests
        continue-on-error: true
        run: |
          cd tests
          if [ -f "go.mod" ]; then
            go mod download
            go test -v -timeout 30m
          else
            echo "Running Terraform native tests..."
            terraform init
            terraform test
          fi
        env:
          ARM_SKIP_PROVIDER_REGISTRATION: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: tests/

  plan-dev:
    name: Plan Dev Environment
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Azure credentials
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init - Dev
        run: |
          cd environments/dev
          terraform init

      - name: Terraform Plan - Dev
        run: |
          cd environments/dev
          terraform plan -out=tfplan -no-color
        env:
          TF_VAR_environment: dev
          TF_VAR_ssh_public_key: ${{ secrets.TF_VAR_SSH_PUBLIC_KEY }}

      - name: Save plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: dev-tfplan
          path: environments/dev/tfplan

      - name: Comment PR with plan
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = 'environments/dev';
            
            // This would contain the actual plan output
            const planOutput = "Terraform plan completed successfully for dev environment. Check the logs for details.";
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan - Dev Environment\n\n\`\`\`\n${planOutput}\n\`\`\``
            });

  # Advanced Integration Testing Job
  advanced-tests:
    name: 'Advanced Integration Tests'
    runs-on: ubuntu-latest
    needs: [validate, plan-dev]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    environment: development
    
    defaults:
      run:
        shell: bash
        working-directory: ./
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0

    - name: Configure Azure credentials
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: terraform init
      working-directory: ./environments/dev

    - name: Run Advanced Resource State Tests
      id: advanced-tests
      run: |
        echo "Running advanced integration tests..."
        terraform test -test-directory=../tests -filter="advanced-integration.tftest.hcl"
      working-directory: ./environments/dev
      continue-on-error: true

    - name: Advanced Test Results
      if: always()
      run: |
        if [ "${{ steps.advanced-tests.outcome }}" = "success" ]; then
          echo "‚úÖ All advanced integration tests passed!"
          echo "- Azure resource state validation: PASSED"
          echo "- Network security validation: PASSED" 
          echo "- NAT Gateway configuration: PASSED"
          echo "- Resource tagging compliance: PASSED"
        else
          echo "‚ùå Some advanced integration tests failed"
          echo "Check the logs above for detailed failure information"
        fi

  # Network Connectivity Validation Job
  network-validation:
    name: 'Network & Security Validation'
    runs-on: ubuntu-latest
    needs: [validate, plan-dev]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    environment: development
    
    defaults:
      run:
        shell: bash
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0

    - name: Configure Azure credentials
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Azure CLI Network Validation
      run: |
        echo "üîç Validating network configuration..."
        
        # Check VNet exists and has correct configuration
        echo "Checking VNet configuration..."
        az network vnet show \
          --resource-group kml_rg_main-5ae9e84837c64352 \
          --name terraform-lab-dev-vnet \
          --query "{name:name, addressSpace:addressSpace, provisioningState:provisioningState}" \
          --output table
        
        # Check NAT Gateway configuration
        echo "Checking NAT Gateway configuration..."
        az network nat gateway show \
          --resource-group kml_rg_main-5ae9e84837c64352 \
          --name terraform-lab-dev-nat-gw \
          --query "{name:name, sku:sku.name, publicIpAddresses:publicIpAddresses[].id}" \
          --output table
        
        # Check NSG rules for security compliance
        echo "Checking Network Security Group rules..."
        for nsg in "terraform-lab-dev-web-nsg" "terraform-lab-dev-app-nsg" "terraform-lab-dev-database-nsg"; do
          echo "NSG: $nsg"
          az network nsg rule list \
            --resource-group kml_rg_main-5ae9e84837c64352 \
            --nsg-name $nsg \
            --query "[].{name:name, access:access, protocol:protocol, sourceAddressPrefix:sourceAddressPrefix, destinationPortRange:destinationPortRange, priority:priority}" \
            --output table
          echo "---"
        done
        
        # Validate subnet configurations
        echo "Checking subnet configurations..."
        az network vnet subnet list \
          --resource-group kml_rg_main-5ae9e84837c64352 \
          --vnet-name terraform-lab-dev-vnet \
          --query "[].{name:name, addressPrefix:addressPrefix, delegation:delegations[0].serviceName, natGateway:natGateway.id}" \
          --output table

    - name: Security Compliance Check
      run: |
        echo "üîí Running security compliance checks..."
        
        # Check for open security rules
        echo "Checking for overly permissive NSG rules..."
        OPEN_RULES=$(az network nsg rule list \
          --resource-group kml_rg_main-5ae9e84837c64352 \
          --nsg-name terraform-lab-dev-database-nsg \
          --query "[?sourceAddressPrefix=='*' && access=='Allow'].name" \
          --output tsv)
        
        if [ -n "$OPEN_RULES" ]; then
          echo "‚ùå WARNING: Database NSG has rules allowing access from anywhere:"
          echo "$OPEN_RULES"
          exit 1
        else
          echo "‚úÖ Database NSG properly restricts access"
        fi
        
        # Check SSH access restrictions
        echo "Checking SSH access restrictions..."
        SSH_FROM_INTERNET=$(az network nsg rule list \
          --resource-group kml_rg_main-5ae9e84837c64352 \
          --nsg-name terraform-lab-dev-web-nsg \
          --query "[?name=='Allow-SSH' && sourceAddressPrefix=='*'].name" \
          --output tsv)
        
        if [ -n "$SSH_FROM_INTERNET" ]; then
          echo "‚ùå WARNING: SSH access allowed from internet"
          exit 1
        else
          echo "‚úÖ SSH access properly restricted to VNet"
        fi

  # Deploy to Development Environment
  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: plan-dev
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Azure credentials
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init - Dev
        run: |
          cd environments/dev
          terraform init

      - name: Terraform Apply - Dev
        run: |
          cd environments/dev
          terraform apply -auto-approve
        env:
          TF_VAR_environment: dev
          TF_VAR_ssh_public_key: ${{ secrets.TF_VAR_SSH_PUBLIC_KEY }}

  plan-staging:
    name: Plan Staging Environment
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Azure credentials
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init - Staging
        run: |
          cd environments/staging
          terraform init

      - name: Terraform Plan - Staging
        run: |
          cd environments/staging
          terraform plan -out=tfplan
        env:
          TF_VAR_environment: staging
          TF_VAR_ssh_public_key: ${{ secrets.TF_VAR_SSH_PUBLIC_KEY }}

      - name: Save plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: staging-tfplan
          path: environments/staging/tfplan

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: plan-staging
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Azure credentials
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init - Staging
        run: |
          cd environments/staging
          terraform init

      - name: Terraform Apply - Staging
        run: |
          cd environments/staging
          terraform apply -auto-approve
        env:
          TF_VAR_environment: staging
          TF_VAR_ssh_public_key: ${{ secrets.TF_VAR_SSH_PUBLIC_KEY }}

  plan-prod:
    name: Plan Production Environment
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Azure credentials
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init - Production
        run: |
          cd environments/prod
          terraform init

      - name: Terraform Plan - Production
        run: |
          cd environments/prod
          terraform plan -out=tfplan
        env:
          TF_VAR_environment: prod
          TF_VAR_ssh_public_key: ${{ secrets.TF_VAR_SSH_PUBLIC_KEY }}

      - name: Save plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: prod-tfplan
          path: environments/prod/tfplan

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: plan-prod
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Azure credentials
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init - Production
        run: |
          cd environments/prod
          terraform init

      - name: Terraform Apply - Production
        run: |
          cd environments/prod
          terraform apply -auto-approve
        env:
          TF_VAR_environment: prod
          TF_VAR_ssh_public_key: ${{ secrets.TF_VAR_SSH_PUBLIC_KEY }}

  documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install terraform-docs
        run: |
          TERRAFORM_DOCS_VERSION="0.18.0"
          curl -sSLo terraform-docs.tar.gz "https://terraform-docs.io/dl/v${TERRAFORM_DOCS_VERSION}/terraform-docs-v${TERRAFORM_DOCS_VERSION}-linux-amd64.tar.gz"
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/
          rm terraform-docs.tar.gz
          terraform-docs --version

      - name: Generate module documentation
        run: |
          for module in modules/*/; do
            if [ -d "$module" ]; then
              echo "Generating docs for $module"
              cd "$module"
              terraform-docs markdown table --output-file README.md .
              cd - > /dev/null
            fi
          done

      - name: Commit documentation changes
        run: |
          git config --global --add safe.directory /github/workspace
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Check for changes
          if [ -n "$(git status --porcelain)" ]; then
            echo "Documentation changes detected, committing..."
            git add .
            git commit -m "docs: update module documentation [skip ci]" || echo "Commit failed, may be no changes"
            git push origin main || echo "Push failed - this may be expected with insufficient permissions"
          else
            echo "No documentation changes to commit"
          fi